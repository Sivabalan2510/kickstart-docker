pipeline {
    agent any 
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_HUB_USERNAME = 'Sivabalan2510'
        GIT_REPO = 'https://github.com/Sivabalan2510/kickstart-docker.git'
    }
    stages {
        stage('Clone Git Repository') { 
            steps {
                sh 'git clone ${GIT_REPO} project/docker-kit'
            }
        }
        stage('Build and Push Docker Images') {
            steps {
                script {
                    def imageDir = 'project/docker-kit/image'
                    def images = sh(script: "find ${imageDir} -mindepth 2 -maxdepth 2 -type d", returnStdout: true).trim().split("\n")

                    images.each { imgPath ->
                        def imageName = imgPath.replaceAll("${imageDir}/", "").replaceAll("/", ":")
                        def dockerfilePath = "${imgPath}/amazon-linux-2.dockerfile"
                        def contextPath = "${imgPath}/context"
                        
                        if (fileExists(dockerfilePath)) {
                            echo "Building Docker image for ${imageName}"
                            sh "docker build -t ${DOCKER_HUB_USERNAME}/${imageName} -f ${dockerfilePath} ${contextPath}"

                            echo "Pushing Docker image ${DOCKER_HUB_USERNAME}/${imageName} to Docker Hub"
                            withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                sh "echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin"
                                sh "docker push ${DOCKER_HUB_USERNAME}/${imageName}"
                            }
                        } else {
                            echo "Dockerfile not found for ${imageName}. Skipping..."
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Cleaning up Docker images'
        }
    }
}
